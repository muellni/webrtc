cmake_minimum_required(VERSION 2.6)
project(webrtc_full)

option(WEBRTC_POSIX "" ON)
option(WEBRTC_LINUX "" ON)
option(WEBRTC_WIN "" OFF)
option(WEBRTC_MAC "" OFF)
option(WEBRTC_ANDROID "" OFF)

if (WEBRTC_POSIX)
  add_definitions(-DWEBRTC_POSIX)
endif ()
if (WEBRTC_LINUX)
  add_definitions(-DWEBRTC_LINUX)
  add_definitions(-DLINUX)
endif ()
if (WEBRTC_MAC)
  add_definitions(-DWEBRTC_MAC)
endif ()
if (WEBRTC_WIN)
  add_definitions(-DWEBRTC_WIN)
endif ()

option(HAVE_WEBRTC_VIDEO "" ON)
if (HAVE_WEBRTC_VIDEO)
  add_definitions(-DHAVE_WEBRTC_VIDEO)
endif()
option(HAVE_WEBRTC_VOICE "" ON)
if (HAVE_WEBRTC_VOICE)
  add_definitions(-DHAVE_WEBRTC_VOICE)
endif()

option(UNIT_TEST "" OFF)
if (UNIT_TEST)
  add_definitions(-DUNIT_TEST)
endif ()
option(SSL_USE_SCHANNEL " " OFF)
if (SSL_USE_SCHANNEL)
  add_definitions(-DSSL_USE_SCHANNEL)
endif ()
option(SSL_USE_OPENSSL " " ON)
if (SSL_USE_OPENSSL)
  add_definitions(-DSSL_USE_OPENSSL)
  add_definitions(-DHAVE_OPENSSL_SSL_H)
  #add_definitions(-DOPENSSL_IS_BORINGSSL)
endif ()
option(SSL_USE_NSS " " OFF)
if (SSL_USE_NSS)
  add_definitions(-DSSL_USE_NSS)
endif ()

option(WEBRTC_EXTERNAL_JSON "" ON)
if (WEBRTC_EXTERNAL_JSON)
  add_definitions(-DWEBRTC_EXTERNAL_JSON)
endif()
option(WEBRTC_BUILD_LIBEVENT "" ON)
if (WEBRTC_BUILD_LIBEVENT)
  add_definitions(-DWEBRTC_BUILD_LIBEVENT)
endif ()
option(FEATURE_ENABLE_SSL "" ON)
if (FEATURE_ENABLE_SSL)
  add_definitions(-DFEATURE_ENABLE_SSL)
endif()
option(TASK_QUEUE_GCD "" OFF)
if (TASK_QUEUE_GCD)
  add_definitions(-DTASK_QUEUE_GCD)
endif()
############################## tmp macro control ##########################
option(ENABLE_API_QUIC_DATA_TRANSPORT "" OFF)
option(ENABLE_API_QUIC_DATA_CHANNEL "" OFF)
option(ENABLE_RTC_EVENT_LOG "" OFF)
option(WEBRTC_LOG "" OFF)
#option(RTC_DISABLE_VP9 "" ON)
option(HAVE_SRTP "" OFF)
if(HAVE_SRTP)
  add_definitions(-DHAVE_SRTP)
endif()
option(RTC_USE_OPENMAX_DL "" OFF)
############################## optimize control ###########################

option(ENABLE_OPTIMIZE_SSE "" OFF)
option(ENABLE_OPTIMIZE_NEON "" OFF)
option(WEBRTC_MIPS "" OFF)
option(WEBRTC_NS_FLOAT "" ON)
if (WEBRTC_NS_FLOAT)
  add_definitions(-DWEBRTC_NS_FLOAT)
endif ()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -std=c++11")

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

#set(WEBRTC_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL "")
set(WEBRTC_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR})

add_subdirectory(webrtc)

set(WEBRTC_LIBRARIES webrtc_full CACHE INTERNAL "")

add_subdirectory(third_party)
#add_subdirectory(systest)
